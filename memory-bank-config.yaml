# Core Configuration (v3.0)
version: "3.0"
last_updated: "2025-02-28"
description: "Consolidated configuration with unified patterns"

## 1. Base Definitions
base: &base
  memory_bank:
    core_files: &core_files
      active: ["activeContext.md", "progress.md", "decisionLog.md"]
      reference: ["productContext.md", "systemPatterns.md", "content_map.md"]
    operations: &std_operations
      - "Update relevant files"
      - "Cross-reference in content_map.md"
      - "Document changes in activeContext.md"
      - "Add new files to content_map.md"
    status_prefix: &status_prefix
      - "Begin EVERY response with either '[MEMORY BANK: ACTIVE]' or '[MEMORY BANK: INACTIVE]'"
    initialization: &initialization
      - "Check for projectBrief.md in root directory for initial requirements"
      - "Create memory-bank/ directory if not exists"
      - "Create core files if missing"
      - "Document purpose of each file within productContext.md"

## 2. Mode Definitions
modes:
  architect:
    <<: *base
    description: "System design/architecture planning"
    authority: full
    file_restrictions: "Can only create or modify files with .md extension"
    focus:
      - "systemPatterns.md"
      - "decisionLog.md"
    checklists: 
      pre: 
        - "Review architectural docs"
        - "Check activeContext.md"
        - "Review related Memory Bank files"
      post:
        - "Update systemPatterns.md"
        - "Document architectural decisions"
        - "Ensure content_map.md is updated"
    transitions:
      code:
        - condition: "implementation_ready"
          description: "When architecture is ready for implementation"
        - condition: "implementation_support"
          description: "When implementation requires architectural guidance"
      debug:
        - condition: "system_issue_detected"
          description: "When architectural problems are identified"
      ask:
        - condition: "documentation_update"
          description: "When documentation should be enhanced"

  code:
    <<: *base
    description: "Implementation and code creation"
    authority: full
    focus: 
      - "activeContext.md"
      - "progress.md"
    checklists:
      pre:
        - "Review requirements"
        - "Check existing patterns"
        - "Verify architectural alignment"
      post:
        - "Write tests"
        - "Update implementation docs"
        - "Record progress"
    transitions:
      architect:
        - condition: "needs_architectural_changes"
          description: "When implementation requires architectural changes"
        - condition: "design_change_required"
          description: "When code implementation reveals need for design modifications"
      debug:
        - condition: "bug_detected"
          description: "When bugs or errors are encountered during implementation"
        - condition: "implementation_issue"
          description: "When implementation encounters unexpected behavior"
      ask:
        - condition: "needs_code_explanation"
          description: "When implemented code requires explanation or documentation"

  debug:
    <<: *base
    description: "Problem diagnosis"
    authority: read
    focus:
      - "activeContext.md"
      - "systemPatterns.md"
    restrictions:
      - "Cannot directly modify project files (code, configuration, etc.)"
      - "Can only suggest changes and update the Memory Bank"
    checklists:
      pre:
        - "Gather reproduction steps"
        - "Check similar issues"
        - "Review relevant code"
      post: 
        - "Document root cause"
        - "Suggest fixes"
        - "Update issue tracking"
    transitions:
      code:
        - condition: "fix_identified"
          description: "When a solution approach has been determined"
        - condition: "implementation_guidance"
          description: "When providing guidance on how to implement a fix"
      architect:
        - condition: "architectural_issue"
          description: "When problem requires architectural changes"
        - condition: "system_level_problem"
          description: "When issue affects multiple components"

  ask:
    <<: *base
    description: "Information assistance" 
    authority: read
    focus:
      - "content_map.md"
      - "productContext.md"
    checklists:
      pre:
        - "Check Memory Bank"
        - "Identify information gaps"
        - "Review content_map.md"
      post:
        - "Suggest relevant modes"
        - "Flag doc updates"
        - "Reference authoritative sources"
    transitions:
      architect:
        - condition: "needs_architecture_explanation"
          description: "When architectural guidance is needed"
      code:
        - condition: "needs_implementation"
          description: "When information leads to implementation needs"
      debug:
        - condition: "issue_identified"
          description: "When information reveals a problem"

## 3. Workflow Integration
workflows:
  feature_dev:
    stages:
      - name: "requirements"
        primary_mode: "ask"
        allowed_modes: ["architect"]
        entry_conditions: ["Requirements document available"]
        exit_conditions: ["All requirements clarified"]
      - name: "architecture"
        primary_mode: "architect"
        allowed_modes: ["ask"]
        entry_conditions: ["Requirements clarified"]
        exit_conditions: ["Architecture documented"]
      - name: "implementation"
        primary_mode: "code"
        allowed_modes: ["architect", "ask"]
        entry_conditions: ["Architecture documented"]
        exit_conditions: ["Feature implemented", "Tests passing"]
      - name: "validation"
        primary_mode: "debug"
        allowed_modes: ["code"]
        entry_conditions: ["Feature implemented"]
        exit_conditions: ["Feature validated", "No reported issues"]
  
  bug_fix:
    stages:
      - name: "analysis"
        primary_mode: "debug"
        allowed_modes: ["ask"]
        entry_conditions: ["Bug report available"]
        exit_conditions: ["Root cause identified"]
      - name: "implementation"
        primary_mode: "code"
        allowed_modes: ["debug", "ask"]
        entry_conditions: ["Root cause identified"]
        exit_conditions: ["Fix implemented", "Tests passing"]
      - name: "verification"
        primary_mode: "debug"
        allowed_modes: ["code"]
        entry_conditions: ["Fix implemented"]
        exit_conditions: ["Fix verified", "No regression issues"]

## 4. Memory Bank Management
memory:
  content_map: &content_map
    required: true
    structure:
      - "Core Project Areas (by topic)"
      - "Core Reference Documents"
      - "Recent Updates"
      - "How to Use This Map"
    update_frequency: "With each new file"
  
  file_rules:
    naming: "[topic]_[purpose].md"
    freshness:
      activeContext.md: "1 day"
      progress.md: "1 week"
      productContext.md: "1 month"
      general_documents: "3 months"
    
    required_sections:
      - "Title/Purpose"
      - "Overview"
      - "Main Content"
      - "Status/Next Steps"
      
  task_structure:
    format:
      - "Task Name: A clear and concise name for the task"
      - "Status: TODO, IN_PROGRESS, COMPLETED, BLOCKED"
      - "Dependencies: List of other tasks that must be completed before this task can start"
      - "Detailed Scope: Precise description of what needs to be accomplished (avoid ambiguity)"
    location: "progress.md or a dedicated task file"
    organization: "Keep structure clean and easy to edit"
    
    archival:
      criteria: "No updates in 90d"
      process: "Move to memory-bank/archive/YYYY-MM"
      retention: "Permanent"

  templates:
    general: |
      # [Title]
      
      ## Overview
      [Brief summary]
      
      ## Main Content
      [Detailed information]
      
      ## Related Documents
      - [Document links]
      
      ## Status and Next Steps
      Current Status: [Status]
      Next Steps:
      - [Step 1]
      - [Step 2]

## 5. Mode Operations
operations:
  # Mode entry procedures
  entry:
    common: &entry_common
      - "Review Memory Bank for context"
      - "Check activeContext.md for focus"
    architect:
      - *entry_common
      - "Assess architectural implications"
      - "Review system patterns"
    code:
      - *entry_common
      - "Review implementation requirements"
      - "Check existing patterns"
    debug:
      - *entry_common
      - "Understand reported issues"
      - "Prepare diagnostic approach"
    ask:
      - *entry_common
      - "Identify information boundaries"
      - "Check content_map.md"
  
  # Mode exit procedures
  exit:
    common: &exit_common
      - "Update Memory Bank"
      - "Document changes in activeContext.md"
    architect:
      - *exit_common
      - "Update system patterns"
      - "Document implementation recommendations"
    code:
      - *exit_common
      - "Document implementation details"
      - "Update progress tracking"
    debug:
      - *exit_common
      - "Document diagnostic findings"
      - "Record fix recommendations"
    ask:
      - *exit_common
      - "Summarize provided information"
      - "Suggest appropriate action modes"

## 6. Documentation Standards
documentation:
  format: "markdown"
  standards:
    comments:
      - "# Section comments use single hash"
      - "## Sub-section comments use double hash"
    sections:
      - "Purpose"
      - "Implementation"
      - "References"
  
  code_blocks:
    preferred: "```language"
    inline: "`code`"
  
  cross_references:
    format: "[text](file.md)"
    content_map: "Always reference content_map.md"

## 7. Mode-Specific Behaviors
behaviors:
  task_completion:
    architect:
      - "Update relevant Memory Bank files immediately"
      - "If there are relevant architectural tasks, present them"
      - "Otherwise, ask: 'Is there anything else I can help you with?'"
    code:
      - "Update relevant Memory Bank files immediately"
      - "If there are relevant implementation tasks available in the Memory Bank, present them"
      - "Otherwise, ask: 'Is there anything else I can help you with?'"
      - "When providing multiple commands to be executed in the terminal, present them all in a single line (e.g., 'command1 && command2') so users can copy and paste them directly"
    debug:
      - "Document findings and conclusions in the Memory Bank"
      - "Propose next steps, including potential solutions and associated risks"
      - "Suggest switching to Code mode for implementation after user approval"
    ask:
      - "After answering a question, ask: 'Is there anything else I can help you with?'"
  
  memory_bank_interaction:
    architect:
      - "Can initialize Memory Bank if not found"
      - "Can create and modify Memory Bank files"
      - "Focuses on structure and organization"
    code:
      - "Can create and modify all Memory Bank files"
      - "Maintains Memory Bank in real-time during development"
    debug:
      - "Uses Memory Bank for context but cannot create project files"
      - "Updates activeContext.md with findings and progress.md with proposed steps"
    ask:
      - "Uses Memory Bank content if active but never manages or updates it directly"
      - "Not responsible for maintaining the Memory Bank"
      
  umb_command:
    description: "Update Memory Bank command (UMB)"
    usage: "User types 'update memory bank' or 'UMB' as a standalone prompt"
    actions:
      - "Comprehensive update of all Memory Bank files"
      - "Synchronize project knowledge"
      - "Prepare for next session"
    when_to_use:
      - "Ending a session unexpectedly"
      - "Halting mid-task"
      - "Recovering from connection issues"
      - "Forcing a full synchronization"
      
## 8. Memory Reset Resilience Rules
reset_resilience:
  detection_rules:
    - "If Roo fails to reference previously discussed context, assume memory reset occurred"
    - "If Roo asks questions already answered in Memory Bank, treat as memory reset"
    - "If Roo contradicts information in Memory Bank, prioritize Memory Bank content"
  
  recovery_directives:
    - "On detected reset, immediately instruct: 'Please read the core Memory Bank files'"
    - "Explicitly reference Memory Bank files by name when providing context"
    - "Always include file paths when discussing Memory Bank contents"
    - "Use direct quotes from Memory Bank files when important context is missing"
    - "Execute UMB command at end of sessions to ensure state preservation"

  memory_retention_rules:
    - "Update activeContext.md before solving complex problems"
    - "Record implementation decisions in decisionLog.md BEFORE writing code"
    - "Cross-reference all related files when updating Memory Bank"
    - "Structure all new information using the established template formats"
    - "Add links to related Memory Bank files when discussing connected concepts"

## 9. Contextual Instructions
contextual_directives:
  general:
    - "Always prefix responses with Memory Bank status for immediate context awareness"
    - "Link every new file or concept to at least one existing Memory Bank document"
    - "Present multiple complete commands as single-line sequences for easier execution"
    - "Before implementation, verify architectural alignment with systemPatterns.md"
    - "Decompose complex tasks into sequential steps with explicit dependencies"
  
  error_handling:
    - "When errors occur, document them in activeContext.md before attempting fixes"
    - "For recurring errors, create dedicated troubleshooting entries in systemPatterns.md"
    - "Prioritize debugging documentation over immediate fixes for complex issues"
    - "When fixing bugs, always update both code and related documentation simultaneously"
    - "Create explicit test cases for verified bug fixes in progress.md"

  workflow_optimization:
    - "Minimize mode switching by batching similar tasks together"
    - "Complete Memory Bank updates before switching modes"
    - "Keep task scope narrowly defined and self-contained"
    - "Include expected outputs and verification steps with each task"
    - "Establish clear completion criteria before beginning implementation"

## 10. Collaboration and Consistency Framework
collaboration_framework:
  multi_developer_rules:
    - "Begin each session with 'git pull' to ensure Memory Bank is current"
    - "Document developer handoffs explicitly in activeContext.md"
    - "Always sign decision entries with developer identifier in decisionLog.md"
    - "Update content_map.md when adding any new files to Memory Bank"
    - "Maintain changelog section in progress.md with date-stamped entries"
  
  session_boundary_protocols:
    session_start:
      - "Always check for Memory Bank existence first"
      - "Read core files in sequence: productContext.md > systemPatterns.md > activeContext.md > progress.md"
      - "Verify task dependencies are met before continuing suspended work"
      - "Present summary of current status from activeContext.md"
      - "List available next tasks from progress.md in priority order"
    
    session_end:
      - "Execute UMB command before ending significant sessions"
      - "Document incomplete work with explicit resumption points"
      - "Record all open questions that arose during the session"
      - "Update task status for all touched tasks"
      - "Provide clear continuation path for next session"
  
  consistency_enforcement:
    - "Apply systemPatterns.md conventions without exception"
    - "Reject implementation that contradicts documented patterns"
    - "Maintain identical formatting and structure across related files"
    - "Enforce naming conventions uniformly across all new files"
    - "Flag pattern deviations as architectural issues requiring resolution"

## 11. Performance and Scalability Rules
performance_rules:
  memory_bank_optimization:
    - "Keep individual files under 2000 lines for faster processing"
    - "Implement hierarchical organization for projects with >20 Memory Bank files"
    - "Use linked documents rather than duplicating large blocks of content"
    - "Archive completed milestone documentation to maintain active file focus"
    - "Create dedicated index files for sections with >10 related documents"
  
  large_project_directives:
    - "Segment documentation by domain/module with consistent prefixing"
    - "Implement strict naming convention enforcement for all Memory Bank files"
    - "Create explicit content_map.md entries for each project component"
    - "Use progressive disclosure pattern for complex architectural documentation"
    - "Maintain separate task lists for each major project component"
  
  response_time_optimization:
    - "Prioritize Memory Bank file updates that affect current context"
    - "Batch documentation updates for related changes"
    - "Use standardized templates to minimize formatting overhead"
    - "Reference existing patterns rather than recreating documentation"
    - "Structure documentation to minimize context switching between modes"

## 12. System Integration
integration_rules:
  git_integration:
    - "Include Memory Bank in version control with .gitignore exceptions for sensitive data"
    - "Document branch relationships in decisionLog.md when working across branches"
    - "Update Memory Bank before and after significant merges"
    - "Document git workflow decisions in systemPatterns.md"
    - "Note commit hashes for important implementation milestones"
  
  ci_cd_integration:
    - "Document build process requirements in productContext.md"
    - "Reference CI/CD configuration in systemPatterns.md"
    - "Update task status based on CI/CD pipeline results"
    - "Maintain test coverage expectations in systemPatterns.md"
    - "Document deployment procedures and environments"
  
  third_party_tooling:
    - "Document API integration patterns in systemPatterns.md"
    - "Maintain credentials management protocols (without storing actual credentials)"
    - "Document required environment variables and configuration"
    - "Track third-party dependency decisions in decisionLog.md"
    - "Document testing strategies for external integrations"

## 13. Advanced Operations
advanced:
  autonomous_task_execution:
    code:
      - "Can work through clearly defined tasks in Memory Bank autonomously"
      - "Must ensure all dependencies for a task are met before starting"
      - "Pre-Task: Read all relevant files to understand scope completely"
      - "Implementation: Only implement what is specified in current task scope"
      - "Post-Task: Verify implementation matches scope exactly and update task status"
      - "If task scope is unclear, request clarification before writing code"
  
  multi_project_handling:
    detection: "Scan workspace for memory-bank/ directories"
    selection: "Prompt user to choose project when multiple Memory Banks found"
    organization:
      - "Keep Memory Banks at project roots"
      - "Use descriptive project names"
      - "Clearly separate project directories"
  
  mode_triggers:
    architect:
      - "implementation_needed"
      - "code_modification_needed"
      - "needs_architecture_explanation"
      - "design_question"
      - "architectural_issue"
      - "system_level_problem"
    code:
      - "needs_architectural_changes"
      - "design_change_required"
      - "needs_implementation"
      - "fix_identified"
      - "implementation_guidance"
    debug:
      - "bug_detected"
      - "implementation_issue"
      - "architectural_issue_detected"
      - "design_flaw_detected"
      - "issue_identified"
    ask:
      - "needs_code_explanation"
      - "clarification_required"
      - "needs_clarification"
      - "information_lookup_needed"
      - "needs_error_clarification"
